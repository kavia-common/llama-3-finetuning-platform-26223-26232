plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.8'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'checkstyle'
}

group = 'com.example'
version = '0.1.0'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

checkstyle {
	toolVersion = '10.17.0'
	// Do not fail the build on style violations in CI by default
	config = resources.text.fromFile('config/checkstyle/checkstyle.xml')
	ignoreFailures = true
	showViolations = true
}

tasks.withType(Checkstyle).configureEach {
	// Ensure the configuration file is set even if missing at configuration time
	configFile = file('config/checkstyle/checkstyle.xml')
	reports {
		xml.required.set(false)
		html.required.set(true)
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

// Ensure check runs checkstyle tasks so they exist and can be invoked standalone
tasks.named('check') {
	dependsOn 'checkstyleMain', 'checkstyleTest'
}
